
   AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with public/private subnets, NAT (1 or per-AZ), S3/DDB VPC Endpoints and optional Flow Logs

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.101.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.102.0/24

  AvailabilityZone1:
    Type: String
    Default: us-east-1a
  AvailabilityZone2:
    Type: String
    Default: us-east-1b

  CreateNatPerAz:
    Type: String
    Default: false
    AllowedValues: [true, false]
    Description: "true = NAT por AZ (HA, m√°s costo); false = un solo NAT en AZ1 (ahorro)."

  FlowLogsS3Arn:
    Type: String
    Default: ""
    Description: "(Opcional) ARN de bucket S3 para VPC Flow Logs (ej: arn:aws:s3:::clouxter-logs-bucket)"

  ProjectTag:
    Type: String
    Default: Clouxter

  EnableVpcEndpoints:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: "Crear VPC Endpoints (Gateway) para S3 y DynamoDB."

Conditions:
  SingleNat: !Equals [!Ref CreateNatPerAz, "false"]
  UseFlowLogs: !Not [!Equals [!Ref FlowLogsS3Arn, ""]]
  UseEndpoints: !Equals [!Ref EnableVpcEndpoints, "true"]

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - { Key: Name, Value: ClouxterTestVPC }
        - { Key: Project, Value: !Ref ProjectTag }

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: ClouxterIGW }
        - { Key: Project, Value: !Ref ProjectTag }

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # ------ Public Subnets ------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
        - { Key: Name, Value: PublicSubnet1 }
        - { Key: Tier, Value: public }
        - { Key: Project, Value: !Ref ProjectTag }

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: true
      Tags:
        - { Key: Name, Value: PublicSubnet2 }
        - { Key: Tier, Value: public }
        - { Key: Project, Value: !Ref ProjectTag }

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - { Key: Name, Value: PublicRouteTable }
        - { Key: Project, Value: !Ref ProjectTag }

  PublicRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ------ Private Subnets ------
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: false
      Tags:
        - { Key: Name, Value: PrivateSubnet1 }
        - { Key: Tier, Value: private }
        - { Key: Project, Value: !Ref ProjectTag }

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: false
      Tags:
        - { Key: Name, Value: PrivateSubnet2 }
        - { Key: Tier, Value: private }
        - { Key: Project, Value: !Ref ProjectTag }

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - { Key: Name, Value: PrivateRouteTable1 }
        - { Key: Project, Value: !Ref ProjectTag }

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - { Key: Name, Value: PrivateRouteTable2 }
        - { Key: Project, Value: !Ref ProjectTag }

  AssocPrivateRT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  AssocPrivateRT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # ------ NAT Gateways ------
  EipNat1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - { Key: Name, Value: NatEip1 }
        - { Key: Project, Value: !Ref ProjectTag }

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNat1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - { Key: Name, Value: NatGw1 }
        - { Key: Project, Value: !Ref ProjectTag }

  EipNat2:
    Condition: !Not [!Ref SingleNat]   # solo si CreateNatPerAz = true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - { Key: Name, Value: NatEip2 }
        - { Key: Project, Value: !Ref ProjectTag }

  NatGateway2:
    Condition: !Not [!Ref SingleNat]
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNat2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - { Key: Name, Value: NatGw2 }
        - { Key: Project, Value: !Ref ProjectTag }

  PrivateDefaultRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateDefaultRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [SingleNat, !Ref NatGateway1, !Ref NatGateway2]

  # ------ VPC Endpoints (Gateway) para S3 y DynamoDB ------
  VPCEndpointS3:
    Condition: UseEndpoints
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      Tags:
        - { Key: Name, Value: VPCEndpointS3 }
        - { Key: Project, Value: !Ref ProjectTag }

  VPCEndpointDDB:
    Condition: UseEndpoints
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      Tags:
        - { Key: Name, Value: VPCEndpointDDB }
        - { Key: Project, Value: !Ref ProjectTag }

  # ------ VPC Flow Logs (a S3, opcional) ------
  VpcFlowLogs:
    Condition: UseFlowLogs
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref MyVPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: s3
      LogDestination: !Ref FlowLogsS3Arn
      MaxAggregationInterval: 60
      Tags:
        - { Key: Name, Value: ClouxterVPCFlowLogs }
        - { Key: Project, Value: !Ref ProjectTag }

Outputs:
  VpcId:               { Value: !Ref MyVPC }
  VpcCidrOut:          { Value: !Ref VpcCidr }
  PublicSubnet1Id:     { Value: !Ref PublicSubnet1 }
  PublicSubnet2Id:     { Value: !Ref PublicSubnet2 }
  PrivateSubnet1Id:    { Value: !Ref PrivateSubnet1 }
  PrivateSubnet2Id:    { Value: !Ref PrivateSubnet2 }
  PublicRouteTableId:  { Value: !Ref PublicRouteTable }
  PrivateRouteTable1Id:{ Value: !Ref PrivateRouteTable1 }
  PrivateRouteTable2Id:{ Value: !Ref PrivateRouteTable2 }
  NatGateway1Id:       { Value: !Ref NatGateway1 }
  NatGateway2Id:
    Value: !If [SingleNat, "not-created", !Ref NatGateway2]

