AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 x2 for Clouxter (SSM, IMDSv2, gp3 encrypted, SSH opcional)"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Type: String
    Default: t3.micro
  EnableSSH:
    Type: String
    Default: "false"
    AllowedValues: ["true","false"]
  AdminCidr:
    Type: String
    Default: "0.0.0.0/0"
    Description: "Solo aplica si EnableSSH=true (ej: 1.2.3.4/32)"

Mappings: {}

Conditions:
  OpenSSH: !Equals [!Ref EnableSSH, "true"]

Resources:
  # Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP (and SSH optional)
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ClouxterSG

  # Ingress HTTP 80
  SGIngressHttp80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  # Ingress SSH 22 (condicional)
  SGIngressSsh22:
    Condition: OpenSSH
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AdminCidr

  # IAM Role + InstanceProfile (para SSM)
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: ClouxterEc2Role

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref Ec2Role ]

  # Launch template-like config via Instance props
  EC2Instance1:
    Type: AWS::EC2::Instance
    DependsOn: Ec2InstanceProfile
    Properties:
      IamInstanceProfile: !Ref Ec2InstanceProfile
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId  # viene del SSM parameter de abajo (ssm dynamic ref)
      SubnetId: !Ref PublicSubnet1Id
      SecurityGroupIds: [ !Ref InstanceSecurityGroup ]
      MetadataOptions:
        HttpTokens: required
        HttpEndpoint: enabled
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: true
            VolumeType: gp3
            VolumeSize: 8
      UserData: !Base64 |
        #!/bin/bash
        dnf -y update
        dnf -y install httpd
        echo '<h1>Instance1 OK</h1>' > /var/www/html/index.html
        systemctl enable --now httpd
      Tags:
        - Key: Name
          Value: Instance1

  EC2Instance2:
    Type: AWS::EC2::Instance
    DependsOn: Ec2InstanceProfile
    Properties:
      IamInstanceProfile: !Ref Ec2InstanceProfile
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !Ref PublicSubnet2Id
      SecurityGroupIds: [ !Ref InstanceSecurityGroup ]
      MetadataOptions:
        HttpTokens: required
        HttpEndpoint: enabled
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: true
            VolumeType: gp3
            VolumeSize: 8
      UserData: !Base64 |
        #!/bin/bash
        dnf -y update
        dnf -y install httpd
        echo '<h1>Instance2 OK</h1>' > /var/www/html/index.html
        systemctl enable --now httpd
      Tags:
        - Key: Name
          Value: Instance2

  # Dynamic reference al AMI AL2023 (ssm:GetParameter necesario)
  AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Outputs:
  InstanceSecurityGroupId:
    Value: !Ref InstanceSecurityGroup
  Instance1Id:
    Value: !Ref EC2Instance1
  Instance2Id:
    Value: !Ref EC2Instance2
